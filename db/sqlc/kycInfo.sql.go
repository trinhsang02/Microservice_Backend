// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: kycInfo.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createKycInfo = `-- name: CreateKycInfo :one
INSERT INTO kyc_info (citizen_id, full_name, phone_number, date_of_birth, nationality, verifier, is_active, kyc_verified_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING citizen_id, full_name, phone_number, date_of_birth, nationality, verifier, is_active, kyc_verified_at
`

type CreateKycInfoParams struct {
	CitizenID     string
	FullName      pgtype.Text
	PhoneNumber   pgtype.Text
	DateOfBirth   pgtype.Date
	Nationality   pgtype.Text
	Verifier      pgtype.Text
	IsActive      pgtype.Bool
	KycVerifiedAt pgtype.Timestamp
}

func (q *Queries) CreateKycInfo(ctx context.Context, arg CreateKycInfoParams) (KycInfo, error) {
	row := q.db.QueryRow(ctx, createKycInfo,
		arg.CitizenID,
		arg.FullName,
		arg.PhoneNumber,
		arg.DateOfBirth,
		arg.Nationality,
		arg.Verifier,
		arg.IsActive,
		arg.KycVerifiedAt,
	)
	var i KycInfo
	err := row.Scan(
		&i.CitizenID,
		&i.FullName,
		&i.PhoneNumber,
		&i.DateOfBirth,
		&i.Nationality,
		&i.Verifier,
		&i.IsActive,
		&i.KycVerifiedAt,
	)
	return i, err
}

const getKycInfoByCitizenID = `-- name: GetKycInfoByCitizenID :one
SELECT citizen_id, full_name, phone_number, date_of_birth, nationality, verifier, is_active, kyc_verified_at FROM kyc_info WHERE citizen_id = $1
`

func (q *Queries) GetKycInfoByCitizenID(ctx context.Context, citizenID string) (KycInfo, error) {
	row := q.db.QueryRow(ctx, getKycInfoByCitizenID, citizenID)
	var i KycInfo
	err := row.Scan(
		&i.CitizenID,
		&i.FullName,
		&i.PhoneNumber,
		&i.DateOfBirth,
		&i.Nationality,
		&i.Verifier,
		&i.IsActive,
		&i.KycVerifiedAt,
	)
	return i, err
}

const getKycInfoByWalletAddress = `-- name: GetKycInfoByWalletAddress :one
SELECT k.citizen_id, k.full_name, k.phone_number, k.date_of_birth, k.nationality, k.verifier, k.is_active, k.kyc_verified_at FROM kyc_info k
JOIN wallet_info w ON k.citizen_id = w.citizen_id
WHERE w.wallet_address = $1
`

func (q *Queries) GetKycInfoByWalletAddress(ctx context.Context, walletAddress string) (KycInfo, error) {
	row := q.db.QueryRow(ctx, getKycInfoByWalletAddress, walletAddress)
	var i KycInfo
	err := row.Scan(
		&i.CitizenID,
		&i.FullName,
		&i.PhoneNumber,
		&i.DateOfBirth,
		&i.Nationality,
		&i.Verifier,
		&i.IsActive,
		&i.KycVerifiedAt,
	)
	return i, err
}

const getKycStatusByWalletAddress = `-- name: GetKycStatusByWalletAddress :one
SELECT k.is_active FROM kyc_info k
JOIN wallet_info w ON k.citizen_id = w.citizen_id
WHERE w.wallet_address = $1
`

func (q *Queries) GetKycStatusByWalletAddress(ctx context.Context, walletAddress string) (pgtype.Bool, error) {
	row := q.db.QueryRow(ctx, getKycStatusByWalletAddress, walletAddress)
	var is_active pgtype.Bool
	err := row.Scan(&is_active)
	return is_active, err
}

const updateKycInfo = `-- name: UpdateKycInfo :one
UPDATE kyc_info
SET full_name = $2, phone_number = $3, date_of_birth = $4, nationality = $5, verifier = $6, is_active = $7, kyc_verified_at = $8
WHERE citizen_id = $1
RETURNING citizen_id, full_name, phone_number, date_of_birth, nationality, verifier, is_active, kyc_verified_at
`

type UpdateKycInfoParams struct {
	CitizenID     string
	FullName      pgtype.Text
	PhoneNumber   pgtype.Text
	DateOfBirth   pgtype.Date
	Nationality   pgtype.Text
	Verifier      pgtype.Text
	IsActive      pgtype.Bool
	KycVerifiedAt pgtype.Timestamp
}

func (q *Queries) UpdateKycInfo(ctx context.Context, arg UpdateKycInfoParams) (KycInfo, error) {
	row := q.db.QueryRow(ctx, updateKycInfo,
		arg.CitizenID,
		arg.FullName,
		arg.PhoneNumber,
		arg.DateOfBirth,
		arg.Nationality,
		arg.Verifier,
		arg.IsActive,
		arg.KycVerifiedAt,
	)
	var i KycInfo
	err := row.Scan(
		&i.CitizenID,
		&i.FullName,
		&i.PhoneNumber,
		&i.DateOfBirth,
		&i.Nationality,
		&i.Verifier,
		&i.IsActive,
		&i.KycVerifiedAt,
	)
	return i, err
}
