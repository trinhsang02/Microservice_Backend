// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: walletInfo.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrUpdateWalletInfo = `-- name: CreateOrUpdateWalletInfo :exec
INSERT INTO wallet_info (wallet_address, citizen_id, wallet_signature, created_at)
VALUES ($1, $2, $3, now())
ON CONFLICT (wallet_address) DO UPDATE
SET citizen_id = EXCLUDED.citizen_id, 
    wallet_signature = EXCLUDED.wallet_signature,
    created_at = now()
`

type CreateOrUpdateWalletInfoParams struct {
	WalletAddress   string
	CitizenID       pgtype.Text
	WalletSignature pgtype.Text
}

func (q *Queries) CreateOrUpdateWalletInfo(ctx context.Context, arg CreateOrUpdateWalletInfoParams) error {
	_, err := q.db.Exec(ctx, createOrUpdateWalletInfo, arg.WalletAddress, arg.CitizenID, arg.WalletSignature)
	return err
}

const createWalletInfo = `-- name: CreateWalletInfo :one
INSERT INTO wallet_info (
    wallet_address,
    citizen_id,
    wallet_signature,
    created_at
) VALUES (
    $1, $2, $3, $4
) RETURNING wallet_address, citizen_id, wallet_signature, created_at
`

type CreateWalletInfoParams struct {
	WalletAddress   string
	CitizenID       pgtype.Text
	WalletSignature pgtype.Text
	CreatedAt       pgtype.Timestamp
}

func (q *Queries) CreateWalletInfo(ctx context.Context, arg CreateWalletInfoParams) (WalletInfo, error) {
	row := q.db.QueryRow(ctx, createWalletInfo,
		arg.WalletAddress,
		arg.CitizenID,
		arg.WalletSignature,
		arg.CreatedAt,
	)
	var i WalletInfo
	err := row.Scan(
		&i.WalletAddress,
		&i.CitizenID,
		&i.WalletSignature,
		&i.CreatedAt,
	)
	return i, err
}
