// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: deposits.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDeposit = `-- name: CreateDeposit :one
INSERT INTO deposits (contract_address, commitment, depositor, leaf_index, tx_hash, timestamp) 
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, contract_address, commitment, depositor, leaf_index, tx_hash, timestamp
`

type CreateDepositParams struct {
	ContractAddress pgtype.Text
	Commitment      pgtype.Text
	Depositor       pgtype.Text
	LeafIndex       pgtype.Int4
	TxHash          pgtype.Text
	Timestamp       pgtype.Numeric
}

func (q *Queries) CreateDeposit(ctx context.Context, arg CreateDepositParams) (Deposit, error) {
	row := q.db.QueryRow(ctx, createDeposit,
		arg.ContractAddress,
		arg.Commitment,
		arg.Depositor,
		arg.LeafIndex,
		arg.TxHash,
		arg.Timestamp,
	)
	var i Deposit
	err := row.Scan(
		&i.ID,
		&i.ContractAddress,
		&i.Commitment,
		&i.Depositor,
		&i.LeafIndex,
		&i.TxHash,
		&i.Timestamp,
	)
	return i, err
}

const getAllDepositsOfContract = `-- name: GetAllDepositsOfContract :many
SELECT id, contract_address, commitment, depositor, leaf_index, tx_hash, timestamp FROM deposits WHERE contract_address = $1
ORDER BY leaf_index ASC
`

func (q *Queries) GetAllDepositsOfContract(ctx context.Context, contractAddress pgtype.Text) ([]Deposit, error) {
	rows, err := q.db.Query(ctx, getAllDepositsOfContract, contractAddress)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Deposit
	for rows.Next() {
		var i Deposit
		if err := rows.Scan(
			&i.ID,
			&i.ContractAddress,
			&i.Commitment,
			&i.Depositor,
			&i.LeafIndex,
			&i.TxHash,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllDepositsOfDepositor = `-- name: getAllDepositsOfDepositor :many
SELECT id, contract_address, commitment, depositor, leaf_index, tx_hash, timestamp FROM deposits WHERE depositor = $1
`

func (q *Queries) getAllDepositsOfDepositor(ctx context.Context, depositor pgtype.Text) ([]Deposit, error) {
	rows, err := q.db.Query(ctx, getAllDepositsOfDepositor, depositor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Deposit
	for rows.Next() {
		var i Deposit
		if err := rows.Scan(
			&i.ID,
			&i.ContractAddress,
			&i.Commitment,
			&i.Depositor,
			&i.LeafIndex,
			&i.TxHash,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
