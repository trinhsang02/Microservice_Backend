version: "3.8"

services:
  postgres:
    image: "postgres:16-alpine"
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=cyclone
      - POSTGRES_DB=cyclone
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "root", "-d", "cyclone"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"

  rabbitmq:
    image: "rabbitmq:3-management"
    ports:
      - "15672:15672" # RabbitMQ management port
      - "5672:5672" # RabbitMQ main port
    networks:
      - microservices-network
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_port_connectivity" ]
      interval: 30s
      timeout: 10s
      retries: 5

  blockchain-listener:
    build:
      context: .
      dockerfile: ./blockchain-listener/Dockerfile
    ports:
      - "8081:8081"
      - "50051:50051" # gRPC port
    networks:
      - microservices-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - DB_HOST=postgres

  # notification-service:
  #   build:
  #     context: .
  #     dockerfile: ./notification-service/Dockerfile
  #   ports:
  #     - "8082:8082"
  #     - "50052:50052" # gRPC port
  #   networks:
  #     - microservices-network
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy
  #   environment:
  #     - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/

  # relayer-service:
  #   build:
  #     context: .
  #     dockerfile: ./relayer-service/Dockerfile
  #   ports:
  #     - "8083:8083"
  #     - "50053:50053" # gRPC port
  #   networks:
  #     - microservices-network
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy
  #   environment:
  #     - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/

  common-service:
    build:
      context: .
      dockerfile: ./common-service/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=postgres
    networks:
      - microservices-network
    depends_on:
      postgres:
        condition: service_healthy

  migrate:
    image: migrate/migrate
    depends_on:
      postgres:
        condition: service_healthy

    volumes:
      - ./db/migration:/migrations
    entrypoint:
      [
        "migrate",
        "-path",
        "/migrations",
        "-database",
        "postgresql://root:cyclone@postgres:5432/cyclone?sslmode=disable",
        "up",
      ]
    networks:
      - microservices-network

networks:
  microservices-network:
    driver: bridge
